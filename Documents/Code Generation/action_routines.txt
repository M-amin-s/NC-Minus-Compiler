VARIABLE, ARRAY AND FUNCTION DECLARATON:
TODO: FUNCTION DECLARATION

#ptype_int_dec begin:
ss.push('int')
end

#ptype_void_dec begin:
ss.push('void')
end

#pid_dec begin:
name <- get_input
ss.push(name)
scp <- scope
ss.push(scp)
addr <- data_ptr
ss.push(addr)
data_ptr += 4
end

#var_dec_finish begin:
var_scope_stack.push((ss[ss_top-2], ss[ss_top-1], ss[ss_top-3], ss[ss_top]))
ss.pop(4)
end

#arr_len_dec begin:
len <- get_input
ss.push(len)
end

#arr_dec_finish begin:
end = ss[ss_top-1] + 4 * ss[ss_top]
arr_scope_stack.push((ss[ss_top-3], ss[ss_top-2], ss[ss_top-4], ss[ss_top-1], end))
ss.pop(5)
end

SCOPE HANDLING:

#enter_scope begin:
scope.push(scope_id + 1)
scope_id <- scope_id + 1
end

#exit_scope begin:
scope.pop(1)
end

IF STATEMENTS:

#if_jmpc_else begin:
ss.push(program_ptr)
program_ptr += 1
end

#if_jmpu_end begin:
ss.push(program_ptr)
program_ptr += 1
end

#if_label_else begin:
program_block[ss[top-1]] <- (JPF, ss[ss_top-2], program_ptr,)
end

#if_label_end begin:
program_block[ss[top]] <- (JP, program_ptr,,)
end

EXPRESSION HANDLING:
TODO: PUSH RESULT ON SS

WHILE STATEMENTS:

#while_label_start begin:
ss.push(program_ptr)
end

#while_jmpc_end begin:
ss.push(program_ptr)
program_ptr += 1
end

#while_jmpu_start begin:
program_block[program_ptr] <- (JP, ss[ss_top-2],,)
end

#while_label_end begin:
program_block[ss[top]] <- (JPF, ss[ss_top-1], program_ptr + 1,)
end
TODO: I added enter_while action routine
#enter_while begin:
in_while = True
end
TODO: I added exit_while action routine
#exit_while begin:
in_while = False
end

SWITCH CASE EXPRESSIONS:

#switch_jmpu_ignore begin:
program_ptr += 1
end

#switch_label_start begin:

end

#switch_jmpu_end begin:
ss.push(program_ptr)
program_ptr += 1
end

#switch_label_ignore begin:
program_block[program_ptr - 2] <- (JP, program_ptr,,)
end

#switch_label_end begin:
program_block[ss[ss_top - 1]] <- (JP, program_ptr,,)
pop(2)
end

#switch_jmpc_skip begin:
t <- temp_ptr
temp_ptr += 4
program_block[program_ptr] <- (EQ, ss[ss_top], ss[ss_top - 1], t)
pop(1)
ss.push(t)
program_ptr += 1
ss.push(program_ptr)
program_ptr += 1
end

#switch_jmpu_start begin:
program_block[program_ptr] <- (JP, ss[ss_top - 3],,)
program_ptr += 1
end

#switch_label_skip begin:
program_block[ss[ss_top]] <- (JPF, ss[ss_top - 1], program_ptr,)
pop(2)
end

TODO: I added enter_switch action routine
#enter_while begin:
in_switch = True
end
TODO: I added exit_switch action routine
#exit_while begin:
in_switch = False
end

--------------------------------------------------------------------------
EXPRESSIONS:

#push_ss begin:
num <- get_input
ss.push(num)
end

#pid_ref begin:
name <- get_input
ss.push(name)
end

#arr_ref begin:
name <- ss[top-1]
address <- search in arr_scope_stack for name and check if it's in the same scope or outer scopes,
and get the address
element_addr <- 4*ss[ss_top] + address
ss.pop(2)
ss.push(element_addr)
end

#var_ref begin:
name <- ss[top]
address <- search in var_scope_stack for name and check if it's in the same scope or outer scopes,
and get the address
ss.pop(1)
ss.push(address)
end

#assignment begin:
program_block[program_ptr] <- (ASSIGN, ss[ss_top], ss[ss_top - 1),)
program_ptr += 1
pop(2)
end

#multop begin:
program_block[program_ptr] <- (MULT, ss[ss_top], ss[ss_top - 1], tmp_ptr)
ss.pop(2)
ss.push(tmp_ptr)
tmp_ptr += 4
program_ptr += 1
end

#addop_p begin:
ss.push('ADD')
end

#addop_m begin:
ss.push('SUB')
end

#addop begin:
if (ss[ss_top-1] == 'ADD')
    program_block[program_ptr] <- (ADD, ss[ss_top], ss[ss_top-2], tmp_ptr)
elif (ss[ss_top-1] == 'SUB')
    program_block[program_ptr] <- (SUB, ss[ss_top], ss[ss_top-2], tmp_ptr)
ss.pop(3)
ss.push(tmp_ptr)
tmp_ptr += 4
program_ptr += 1
end

#relop_lt begin:
ss.push('LT')
end

#relop_eq begin:
ss.push('EQ')
end

#relop begin:
if (ss[ss_top-1] == 'LT')
    program_block[program_ptr] <- (LT, ss[ss_top-2], ss[ss_top], tmp_ptr)
elif (ss[ss_top-1] == 'EQ')
    program_block[program_ptr] <- (EQ, ss[ss_top], ss[ss_top-2], tmp_ptr)
ss.pop(3)
ss.push(tmp_ptr)
tmp_ptr += 4
program_ptr += 1
end

#negate_factor begin:
program_block[program_ptr] <- (SUB, ss[ss_top], #0, tmp_ptr)
ss.pop(1)
ss.push(tmp_ptr)
tmp_ptr += 4
program_ptr += 1
end

#push_num_exp begin:
num <- get_input
ss.push(num)
end
TODO:
#jmp_to_main begin:

end
TODO:
#EXIT begin:

end

#func_def begin:
ss.pop(1)
data_ptr -= 4
if (ss[top-2] == 'int'):
    func_scope_stack.push((ss[ss_top-1], ss[ss_top], [], data_ptr, ))
    data_ptr += 4
elif (ss[top-2] == 'void'):
    func_scope_stack.push((ss[ss_top-1], ss[ss_top], [], , ))
ss.pop(3)
end

#save_func_begin begin:
ss.push(program_ptr)
program_ptr += 1
func_scope_stack[fss_top][4] = program_ptr
end

#end_func begin:
program_block[ss[ss_top]] <- (JP, program_ptr,,)
ss.pop(1)
end

#no_params begin:
ss.pop(1)
end

#pid_param_def begin:
name <- get_input
ss.push(name)
func_scope <- scope.push(scope_id)
ss.push(func_scope)
addr <- data_ptr
ss.push(addr)
data_ptr += 4
end

#array_param_def begin:
func_scope_stack[fss_top][2].append((ss[ss_top-2], ss[ss_top], 'array', ss[ss_top-3]))
arr_scope_stack.push((ss[ss_top-2], ss[ss_top-1], ss[ss_top], ss[ss_top-1],))
ss.pop(4)
end

#var_param_def begin:
func_scope_stack[fss_top][2].append((ss[ss_top-2], ss[ss_top], 'num', ss[ss_top-3]))
var_scope_stack.push((ss[ss_top-2], ss[ss_top-1], ss[ss_top], ss[ss_top-1]))
ss.pop(4)
end

#assign_return begin:
out <- func_scope_stack[fss_top][3]
program_block[program_ptr] <- (ASSIGN, ss[top], out,)
ss.pop(1)
end

#func_call_name begin:
func_name <- get_input
ss.push(func_name)
end


#swap_name begin:
name <- ss[top_ss - 1]
arg <- ss[top_ss]
pop(2)
ss.push(arg)
ss.push(name)
end

#call_function begin:
func_name <- ss[top_ss]
search in func_scope_stack for 'func_name' and put it in func
func <- ....
pop(1)
for(i=len(func[2]); i>0; i--):
    addr <- func[2][i][1]
    type <- func[2][i][2]
    if(type == 'num'):
        program_block[program_ptr] <- (ASSIGN, ss[top], addr,)
    elif(type == 'array'):
        program_block[program_ptr] <- (ASSIGN, @ss[top], addr,)
    program_ptr += 1
    pop(1)
func_ptr <- func[4]
program_block[program_ptr] <- (JP, func_ptr,,)
program_ptr += 1
result <- func[3]
ss.push[result]
end

#check_while begin:
if(not in_while)
    print "No 'while' found for 'continue'"
end

#check_for_while_switch begin:
if(not in_while and not in_switch)
    print "No 'while' or 'switch' found for 'break'"
end