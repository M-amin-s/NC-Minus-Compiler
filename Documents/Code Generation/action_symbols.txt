DONE:
Program -> #jmp_to_main Declaration_list eof #EXIT
Declaration_list -> Declaration Declaration_list | epsilon
Declaration -> Type_specifier #pid_dec id Var_Fun_declaration
Var_declaration_1 -> #var_dec_finish ; | [ #arr_len_dec num ] #arr_dec_finish ;
Type_specifier -> #ptype_int_dec int | #ptype_void_dec void
Compound_stmt -> { #enter_scope Declaration_list Statement_list } #exit_scope
Selection_stmt -> if ( Expression ) #if_jmpc_else Statement #if_jmpu_end #if_label_else else Statement #if_label_end
Iteration_stmt -> while #while_label_start ( Expression ) #while_jmpc_end Statement #while_jmpu_start #while_label_end
Switch_stmt -> #switch_jmpu_ignore #switch_jmpu_end  #switch_label_ignore switch ( Expression ) { Case_stmts Default_stmt } #switch_label_end
Case_stmts -> Case_stmt Case_stmts | epsilon
Case_stmt -> case #push_ss num #switch_jmpc_skip : Statement_list #switch_jmpu_start #switch_label_skip
Default_stmt -> default : Statement_list | epsilon
Expression -> #pid_ref id Expression_id_1 | Expression_id_2
Expression_id_1 -> Var_1 Expression_ob_1 | Simple_expression_id_ob_2
Expression_id_2 -> Additive_expression_id_2 Simple_expression_1
Additive_expression_id_2 -> Term_id_2 Additive_expression_1
Term_id_2 -> Signed_factor_id_2 Term_1
Signed_factor_id_2 -> Factor_id_1 | + Factor | - Factor #negate_factor
Factor_id_1 -> ( Expression ) | #push_num_exp num
Var_1 -> [ Expression ] #arr_ref | epsilon #var_ref
Expression_ob_1 -> = Expression #assignment | Simple_expression_id_ob_1
Simple_expression_id_ob_1 -> Additive_expression_id_ob_1 Simple_expression_1
Additive_expression_id_ob_1 -> Term_1 Additive_expression_1
Simple_expression_1 -> Relop Additive_expression #relop | epsilon
Additive_expression_1 -> Addop Additive_expression #addop | epsilon
Term_1 -> * Term #multop | epsilon
Relop -> #relop_lt < | #relop_eq ==
Addop -> #addop_p + | #addop_m -
Additive_expression -> Term Additive_expression_1
Term -> Signed_factor Term_1
Signed_factor -> Factor | + Factor | - Factor #negate_factor
Simple_expression_id_ob_2 -> Additive_expression_id_ob_2 Simple_expression_1
Additive_expression_id_ob_2 -> Term_id_ob_2 Additive_expression_1
Var_Fun_declaration -> Var_declaration_1 | #func_def ( Params ) #save_func_begin Compound_stmt #end_func
Params -> #ptype_void_dec void Params_1 | Params_2
Params_1 -> Param_list_void | #no_params epsilon
Param_list_void -> Param_void Param_list_1
Param_void -> #pid_param_def id Param_1
Params_2 -> Param_void_1 Param_list_1
Param_void_1 -> int id Param_1
Param_list -> Param Param_list_1
Param_list_1 -> , Param_list | epsilon
Param -> Type_specifier #pid_param_def id Param_1
Param_1 -> #array_param_def [ ] | #var_param_def epsilon
Statement_list -> Statement Statement_list | epsilon
Statement -> Expression_stmt | Compound_stmt | Selection_stmt | Iteration_stmt | Return_stmt | Switch_stmt
Return_stmt -> return Return_stmt_1
Return_stmt_1 -> ; | Expression ; #assign_return
Var_Call -> ( Args ) #call_function | Var_1
Args -> Arg_list | epsilon
Arg_list -> Expression #swap_name Arg_list_1
Arg_list_1 -> , Arg_list | epsilon
Term_id_ob_2 -> ( Args ) #call_function Term_1
Factor -> ( Expression ) | #func_call_name id Var_Call | #push_num_exp num

TODO:
Expression_stmt -> Expression ; | continue ; | break ; | ;