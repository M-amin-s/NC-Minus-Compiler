thans to hackingoff.com for finding follow sets of our grammar :)
http://hackingoff.com/compilers/predict-first-follow-set

Follow sets:
program	$
declaration-list	continue, break, ;, ID, +, -, (, NUM, if, return, {, switch, while, EOF
declaration	int, void, continue, break, ;, ID, +, -, (, NUM, if, return, {, switch, while, EOF
var-declaration	int, void, continue, break, ;, ID, +, -, (, NUM, if, return, {, switch, while, EOF
var-declaration-1	int, void, continue, break, ;, ID, +, -, (, NUM, if, return, {, switch, while, EOF
type-specifier	ID
fun-declaration	int, void, continue, break, ;, ID, +, -, (, NUM, if, return, {, switch, while, EOF
params	)
param-list	)
param-list-1	)
param	,, )
param-1	,, )
compound-stmt	else, continue, break, ;, ID, +, -, (, NUM, if, return, {, switch, while, int, void, EOF, }, case, default
statement-list	}, case, default
statement	else, continue, break, ;, ID, +, -, (, NUM, if, return, {, switch, while, }, case, default
expression-stmt	else, continue, break, ;, ID, +, -, (, NUM, if, return, {, switch, while, }, case, default
selection-stmt	else, continue, break, ;, ID, +, -, (, NUM, if, return, {, switch, while, }, case, default
iteration-stmt	else, continue, break, ;, ID, +, -, (, NUM, if, return, {, switch, while, }, case, default
return-stmt	else, continue, break, ;, ID, +, -, (, NUM, if, return, {, switch, while, }, case, default
return-stmt-1	else, continue, break, ;, ID, +, -, (, NUM, if, return, {, switch, while, }, case, default
switch-stmt	else, continue, break, ;, ID, +, -, (, NUM, if, return, {, switch, while, }, case, default
case-stmts	default
case-stmt	case, default
default-stmt	}
expression	,, ), ], ;
var	=, term1
var-1	=, term1
simple-expression	,, ), ], ;
simple-expression-1	,, ), ], ;
relop	+, -, (, NUM, ID
additive-expression	<, ==, ,, ), ], ;
additive-expression-1	<, ==, ,, ), ], ;
addop	+, -, (, NUM, ID
term	+, -, <, ==, ,, ), ], ;
term-1
signed-factor	term1
factor	term1
call	term1
args	)
arg-list	)
arg-list-1	)