thans to hackingoff.com for finding first sets of our grammar :)
http://hackingoff.com/compilers/predict-first-follow-set
EOF	EOF
ε	ε
ID	ID
;	;
[	[
NUM	NUM
]	]
int	int
void	void
(	(
)	)
,	,
{	{
}	}
continue	continue
break	break
if	if
else	else
while	while
return	return
switch	switch
case	case
:	:
default	default
=	=
<	<
==	==
+	+
-	-
*	*
program	EOF, ε, int, void
declaration-list	ε, int, void
var-declaration-1	;, [
type-specifier	int, void
params	void, int
param-list-1	,, ε
param-1	[, ε
compound-stmt	{
statement-list	ε, continue, break, ;, ID, +, -, (, NUM, if, return, {, switch, while
expression-stmt	continue, break, ;, ID, +, -, (, NUM
selection-stmt	if
iteration-stmt	while
return-stmt	return
return-stmt-1	;, ID, +, -, (, NUM
switch-stmt	switch
case-stmts	ε, case
case-stmt	case
default-stmt	default, ε
var	ID
var-1	[, ε
simple-expression-1	ε, <, ==
relop	<, ==
additive-expression-1	ε, +, -
addop	+, -
term-1	*, ε
signed-factor	+, -, (, NUM, ID
factor	(, NUM, ID
call	ID
args	ε, ID, +, -, (, NUM
arg-list-1	,, ε
var-declaration	int, void
fun-declaration	int, void
param	int, void
expression	ID, +, -, (, NUM
declaration	int, void
param-list	int, void
term	+, -, (, NUM, ID
additive-expression	+, -, (, NUM, ID
simple-expression	+, -, (, NUM, ID
arg-list	ID, +, -, (, NUM
statement	continue, break, ;, ID, +, -, (, NUM, if, return, {, switch, while