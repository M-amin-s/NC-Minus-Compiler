from Compiler.parser_classes import *
from Compiler.scanner import TokenType

t_eof = Terminal(TokenType.EOF, '')
t_epsilon = Terminal(TokenType.NOT_A_TYPE, None, True)
t_id = Terminal(TokenType.ID, None)
t_semicolon = Terminal(TokenType.SYMBOL, ';')
t_open_bracket = Terminal(TokenType.SYMBOL, '[')
t_close_bracket = Terminal(TokenType.SYMBOL, ']')
t_num = Terminal(TokenType.NUM, None)
t_int = Terminal(TokenType.KEYWORD, 'int')
t_void = Terminal(TokenType.KEYWORD, 'void')
t_open_parant = Terminal(TokenType.SYMBOL, '(')
t_close_parant = Terminal(TokenType.SYMBOL, ')')
t_open_crosh = Terminal(TokenType.SYMBOL, '{')
t_close_crosh = Terminal(TokenType.SYMBOL, '}')
t_continue = Terminal(TokenType.KEYWORD, 'continue')
t_break = Terminal(TokenType.KEYWORD, 'break')
t_if = Terminal(TokenType.KEYWORD, 'if')
t_else = Terminal(TokenType.KEYWORD, 'else')
t_while = Terminal(TokenType.KEYWORD, 'while')
t_return = Terminal(TokenType.KEYWORD, 'return')
t_switch = Terminal(TokenType.KEYWORD, 'switch')
t_case = Terminal(TokenType.KEYWORD, 'case')
t_default = Terminal(TokenType.KEYWORD, 'default')
t_double_dot = Terminal(TokenType.SYMBOL, ':')
t_equal = Terminal(TokenType.SYMBOL, '=')
t_comma = Terminal(TokenType.SYMBOL, ',')
t_plus = Terminal(TokenType.SYMBOL, '+')
t_minus = Terminal(TokenType.SYMBOL, '-')
t_star = Terminal(TokenType.SYMBOL, '*')
t_double_equal = Terminal(TokenType.SYMBOL, '==')
t_lower = Terminal(TokenType.SYMBOL, '<')
t_greater = Terminal(TokenType.SYMBOL, '>')

program = Non_Terminal("program")
declaration_list = Non_Terminal("declaration_list")
declaration = Non_Terminal("declaration")
var_fun_declaration = Non_Terminal("var_fun_declaration")
var_declaration = Non_Terminal("var_declaration")
var_declaration_1 = Non_Terminal("var_declaration_1")
type_specifier = Non_Terminal("type_specifier")
fun_declaration = Non_Terminal("fun_declaration")
params = Non_Terminal("params")
params_1 = Non_Terminal("params_1")
param_list_void = Non_Terminal("param_list_void")
param_void = Non_Terminal("param_void")
params_2 = Non_Terminal("params_2")
param_void_1 = Non_Terminal("param_void_1")
param_list = Non_Terminal("param_list")
param_list_1 = Non_Terminal("param_list_1")
param = Non_Terminal("param")
param_1 = Non_Terminal("param_1")
compound_stmt = Non_Terminal("compound_stmt")
statement_list = Non_Terminal("statement_list")
statement = Non_Terminal("statement")
expression_stmt = Non_Terminal("expression_stmt")
selection_stmt = Non_Terminal("selection_stmt")
iteration_stmt = Non_Terminal("iteration_stmt")
return_stmt = Non_Terminal("return_stmt")
return_stmt_1 = Non_Terminal("return_stmt_1")
switch_stmt = Non_Terminal("switch_stmt")
case_stmts = Non_Terminal("case_stmts")
case_stmt = Non_Terminal("case_stmt")
default_stmt = Non_Terminal("default_stmt")
expression = Non_Terminal("expression")
simple_expression_id_1 = Non_Terminal("simple_expression_id_1")
additive_expression_id_1 = Non_Terminal("additive_expression_id_1")
term_id_1 = Non_Terminal("term_id_1")
signed_factor_id = Non_Terminal("signed_factor_id")
expression_id_1 = Non_Terminal("expression_id_1")
expression_ob_1 = Non_Terminal("expression_ob_1")
simple_expression_id_ob_1 = Non_Terminal("simple_expression_id_ob_1")
additive_expression_id_ob_1 = Non_Terminal("additive_expression_id_ob_1")
simple_expression_id_ob_2 = Non_Terminal("simple_expression_id_ob_2")
additive_expression_id_ob_2 = Non_Terminal("additive_expression_id_ob_2")
term_id_ob_2 = Non_Terminal("term_id_ob_2")
var_1 = Non_Terminal("var_1")
simple_expression = Non_Terminal("simple_expression")
simple_expression_1 = Non_Terminal("simple_expression_1")
relop = Non_Terminal("relop")
additive_expression = Non_Terminal("additive_expression")
additive_expression_1 = Non_Terminal("additive_expression_1")
addop = Non_Terminal("addop")
term = Non_Terminal("term")
term_1 = Non_Terminal("term_1")
signed_factor = Non_Terminal("signed_factor")
factor = Non_Terminal("factor")
var_call = Non_Terminal("var_call")
call = Non_Terminal("call")
args = Non_Terminal("args")
arg_list = Non_Terminal("arg_list")
arg_list_1 = Non_Terminal("arg_list_1")
expression_id_2 = Non_Terminal("expression_id_2")
additive_expression_id_2 = Non_Terminal("additive_expression_id_2")
term_id_2 = Non_Terminal("term_id_2")
signed_factor_id_2 = Non_Terminal("signed_factor_id_2")
factor_id_1 = Non_Terminal("factor_id_1")

program.set_first([t_epsilon, t_int, t_void, t_eof])
declaration_list.set_first([t_int, t_void, t_epsilon])
var_fun_declaration.set_first([t_open_parant, t_semicolon, t_open_bracket])
var_declaration_1.set_first([t_semicolon, t_open_bracket])
type_specifier.set_first([t_int, t_void])
params.set_first([t_void, t_int])
params_1.set_first([t_id, t_epsilon])
param_void.set_first([t_id])
param_void_1.set_first([t_int])
param_list_1.set_first([t_comma, t_epsilon])
param_1.set_first([t_open_bracket, t_epsilon])
compound_stmt.set_first([t_open_crosh])
statement_list.set_first([t_epsilon, t_continue, t_break, t_semicolon, t_open_crosh, t_if, t_while, t_return, t_switch, t_id, t_plus, t_minus, t_open_parant, t_num])
expression_stmt.set_first([t_continue, t_break, t_semicolon, t_id, t_plus, t_minus, t_open_parant, t_num])
selection_stmt.set_first([t_if])
iteration_stmt.set_first([t_while])
return_stmt.set_first([t_return])
return_stmt_1.set_first([t_semicolon, t_id, t_plus, t_minus, t_open_parant, t_num])
switch_stmt.set_first([t_switch])
case_stmts.set_first([t_case, t_epsilon])
case_stmt.set_first([t_case])
default_stmt.set_first([t_default, t_epsilon])
expression.set_first([t_id, t_plus, t_minus, t_open_parant, t_num])
expression_ob_1.set_first([t_equal, t_star, t_epsilon, t_plus, t_minus, t_lower, t_double_equal])
term_id_ob_2.set_first([t_open_parant])
var_1.set_first([t_open_bracket, t_epsilon])
simple_expression_1.set_first([t_epsilon, t_lower, t_double_equal])
relop.set_first([t_lower, t_double_equal])
additive_expression_1.set_first([t_epsilon, t_plus, t_minus])
addop.set_first([t_plus, t_minus])
term_1.set_first([t_star, t_epsilon])
signed_factor.set_first([t_plus, t_minus, t_open_parant, t_id, t_num])
factor.set_first([t_open_parant, t_id, t_num])
var_call.set_first([t_open_parant, t_open_bracket, t_epsilon])
call.set_first([t_id])
args.set_first([t_id, t_plus, t_minus, t_open_parant, t_num, t_epsilon])
arg_list_1.set_first([t_comma, t_epsilon])
signed_factor_id_2.set_first([t_plus, t_minus, t_open_parant, t_num])
factor_id_1.set_first([t_open_parant, t_num])
declaration.set_first([t_int, t_void])
var_declaration.set_first([t_int, t_void])
fun_declaration.set_first([t_int, t_void])
param_list_void.set_first([t_id])
params_2.set_first([t_int])
param.set_first([t_int, t_void])
expression_id_1.set_first([t_open_bracket, t_epsilon, t_equal, t_star, t_plus, t_minus, t_lower, t_open_parant, t_double_equal])
additive_expression_id_ob_1.set_first([t_star, t_epsilon, t_plus, t_minus, t_lower, t_double_equal])
additive_expression_id_ob_2.set_first([t_open_parant])
param_list.set_first([t_int, t_void])
signed_factor_id.set_first([t_open_parant, t_open_bracket, t_epsilon])
simple_expression_id_ob_2.set_first([t_open_parant])
term.set_first([t_plus, t_minus, t_open_parant, t_id, t_num])
term_id_2.set_first([t_plus, t_minus, t_open_parant, t_num])
term_id_1.set_first([t_open_parant, t_open_bracket, t_epsilon, t_star])
simple_expression_id_ob_1.set_first([t_star, t_epsilon, t_plus, t_minus, t_lower, t_double_equal])
additive_expression.set_first([t_plus, t_minus, t_open_parant, t_id, t_num])
additive_expression_id_2.set_first([t_plus, t_minus, t_open_parant, t_num])
simple_expression.set_first([t_plus, t_minus, t_open_parant, t_id, t_num])
expression_id_2.set_first([t_plus, t_minus, t_open_parant, t_num])
additive_expression_id_1.set_first([t_open_parant, t_open_bracket, t_epsilon, t_star, t_plus, t_minus])
arg_list.set_first([t_id, t_plus, t_minus, t_open_parant, t_num])
statement.set_first([t_continue, t_break, t_semicolon, t_id, t_plus, t_minus, t_open_parant, t_num, t_if, t_return, t_open_crosh, t_switch, t_while])
simple_expression_id_1.set_first([t_open_parant, t_open_bracket, t_epsilon, t_star, t_plus, t_minus, t_lower, t_double_equal])

program.set_follow([])
declaration_list.set_follow([t_continue, t_break, t_semicolon, t_id, t_plus, t_minus, t_open_parant, t_num, t_if, t_return, t_open_crosh, t_switch, t_while, t_eof])
declaration.set_follow([t_int, t_void, t_continue, t_break, t_semicolon, t_id, t_plus, t_minus, t_open_parant, t_num, t_if, t_return, t_open_crosh, t_switch, t_while, t_eof])
var_fun_declaration.set_follow([t_int, t_void, t_continue, t_break, t_semicolon, t_id, t_plus, t_minus, t_open_parant, t_num, t_if, t_return, t_open_crosh, t_switch, t_while, t_eof])
var_declaration.set_follow([])
var_declaration_1.set_follow([t_int, t_void, t_continue, t_break, t_semicolon, t_id, t_plus, t_minus, t_open_parant, t_num, t_if, t_return, t_open_crosh, t_switch, t_while, t_eof])
type_specifier.set_follow([t_id])
fun_declaration.set_follow([])
params.set_follow([t_close_parant])
params_1.set_follow([t_close_parant])
param_list_void.set_follow([t_close_parant])
param_void.set_follow([t_comma, t_close_parant])
params_2.set_follow([t_close_parant])
param_void_1.set_follow([t_comma, t_close_parant])
param_list.set_follow([t_close_parant])
param_list_1.set_follow([t_close_parant])
param.set_follow([t_comma, t_close_parant])
param_1.set_follow([t_comma, t_close_parant])
compound_stmt.set_follow([t_else, t_continue, t_break, t_semicolon, t_id, t_plus, t_minus, t_open_parant, t_num, t_if, t_return, t_open_crosh, t_switch, t_while, t_int, t_void, t_eof, t_close_crosh, t_case, t_default])
statement_list.set_follow([t_close_crosh, t_case, t_id, t_plus, t_minus, t_open_parant, t_num, t_default])
statement.set_follow([t_else, t_continue, t_break, t_semicolon, t_id, t_plus, t_minus, t_open_parant, t_num, t_if, t_return, t_open_crosh, t_switch, t_while, t_close_crosh, t_case, t_default])
expression_stmt.set_follow([t_else, t_continue, t_break, t_semicolon, t_id, t_plus, t_minus, t_open_parant, t_num, t_if, t_return, t_open_crosh, t_switch, t_while, t_close_crosh, t_case, t_default])
selection_stmt.set_follow([t_else, t_continue, t_break, t_semicolon, t_id, t_plus, t_minus, t_open_parant, t_num, t_if, t_return, t_open_crosh, t_switch, t_while, t_close_crosh, t_case, t_default])
iteration_stmt.set_follow([t_else, t_continue, t_break, t_semicolon, t_id, t_plus, t_minus, t_open_parant, t_num, t_if, t_return, t_open_crosh, t_switch, t_while, t_close_crosh, t_case, t_default])
return_stmt.set_follow([t_else, t_continue, t_break, t_semicolon, t_id, t_plus, t_minus, t_open_parant, t_num, t_if, t_return, t_open_crosh, t_switch, t_while, t_close_crosh, t_case, t_default])
return_stmt_1.set_follow([t_else, t_continue, t_break, t_semicolon, t_id, t_plus, t_minus, t_open_parant, t_num, t_if, t_return, t_open_crosh, t_switch, t_while, t_close_crosh, t_case, t_default])
switch_stmt.set_follow([t_else, t_continue, t_break, t_semicolon, t_id, t_plus, t_minus, t_open_parant, t_num, t_if, t_return, t_open_crosh, t_switch, t_while, t_close_crosh, t_case, t_default])
case_stmts.set_follow([t_id, t_plus, t_minus, t_open_parant, t_num, t_default])
case_stmt.set_follow([t_case, t_id, t_plus, t_minus, t_open_parant, t_num, t_default])
default_stmt.set_follow([t_close_crosh])
expression.set_follow([t_close_parant, t_comma, t_close_bracket, t_semicolon])
simple_expression_id_1.set_follow([])
additive_expression_id_1.set_follow([t_lower, t_double_equal])
term_id_1.set_follow([t_plus, t_minus, t_lower, t_double_equal])
signed_factor_id.set_follow([t_star, t_plus, t_minus, t_lower, t_double_equal])
expression_id_1.set_follow([t_close_parant, t_comma, t_close_bracket, t_semicolon])
expression_ob_1.set_follow([t_close_parant, t_comma, t_close_bracket, t_semicolon])
simple_expression_id_ob_1.set_follow([t_close_parant, t_comma, t_close_bracket, t_semicolon])
additive_expression_id_ob_1.set_follow([t_lower, t_double_equal, t_close_parant, t_comma, t_close_bracket, t_semicolon])
simple_expression_id_ob_2.set_follow([t_close_parant, t_comma, t_close_bracket, t_semicolon])
additive_expression_id_ob_2.set_follow([t_lower, t_double_equal, t_close_parant, t_comma, t_close_bracket, t_semicolon])
term_id_ob_2.set_follow([t_plus, t_minus, t_lower, t_double_equal, t_close_parant, t_comma, t_close_bracket, t_semicolon])
var_1.set_follow([t_equal, t_star, t_plus, t_minus, t_lower, t_double_equal, t_close_parant, t_comma, t_close_bracket, t_semicolon])
simple_expression.set_follow([])
simple_expression_1.set_follow([t_close_parant, t_comma, t_close_bracket, t_semicolon])
relop.set_follow([t_plus, t_minus, t_open_parant, t_id, t_num])
additive_expression.set_follow([t_lower, t_double_equal, t_close_parant, t_comma, t_close_bracket, t_semicolon])
additive_expression_1.set_follow([t_lower, t_double_equal, t_close_parant, t_comma, t_close_bracket, t_semicolon])
addop.set_follow([t_plus, t_minus, t_open_parant, t_id, t_num])
term.set_follow([t_plus, t_minus, t_lower, t_double_equal, t_close_parant, t_comma, t_close_bracket, t_semicolon])
term_1.set_follow([t_plus, t_minus, t_lower, t_double_equal, t_close_parant, t_comma, t_close_bracket, t_semicolon])
signed_factor.set_follow([t_star, t_plus, t_minus, t_lower, t_double_equal, t_close_parant, t_comma, t_close_bracket, t_semicolon])
factor.set_follow([t_star, t_plus, t_minus, t_lower, t_double_equal, t_close_parant, t_comma, t_close_bracket, t_semicolon])
var_call.set_follow([t_star, t_plus, t_minus, t_lower, t_double_equal, t_close_parant, t_comma, t_close_bracket, t_semicolon])
call.set_follow([])
args.set_follow([t_close_parant])
arg_list.set_follow([t_close_parant])
arg_list_1.set_follow([t_close_parant])
expression_id_2.set_follow([t_close_parant, t_comma, t_close_bracket, t_semicolon])
additive_expression_id_2.set_follow([t_lower, t_double_equal, t_close_parant, t_comma, t_close_bracket, t_semicolon])
term_id_2.set_follow([t_plus, t_minus, t_lower, t_double_equal, t_close_parant, t_comma, t_close_bracket, t_semicolon])
signed_factor_id_2.set_follow([t_star, t_plus, t_minus, t_lower, t_double_equal, t_close_parant, t_comma, t_close_bracket, t_semicolon])
factor_id_1.set_follow([t_star, t_plus, t_minus, t_lower, t_double_equal, t_close_parant, t_comma, t_close_bracket, t_semicolon])

state_1 = State(1, program, is_first=True)
state_2 = State(2, program)
state_3 = State(3, program, is_end=True)
state_1.add_edge(Edge(state_1, state_2, declaration_list))
state_2.add_edge(Edge(state_2, state_3, t_eof))
program.set_transition_diagram(Transition_diagram([state_1, state_2, state_3], state_1))

state_4 = State(4, declaration_list, is_first=True)
state_5 = State(5, declaration_list)
state_6 = State(6, declaration_list, is_end=True)
state_4.add_edge(Edge(state_4, state_5, declaration))
state_5.add_edge(Edge(state_5, state_6, declaration_list))
state_4.add_edge(Edge(state_4, state_6, t_epsilon))
declaration_list.set_transition_diagram(Transition_diagram([state_4, state_5, state_6], state_4))

state_7 = State(7, declaration, is_first=True)
state_8 = State(8, declaration)
state_9 = State(9, declaration)
state_10 = State(10, declaration, is_end=True)
state_7.add_edge(Edge(state_7, state_8, type_specifier))
state_8.add_edge(Edge(state_8, state_9, t_id, codegen_method=pid_dec))
state_9.add_edge(Edge(state_9, state_10, var_fun_declaration))
declaration.set_transition_diagram(Transition_diagram([state_7, state_8, state_9, state_10], state_7))

state_11 = State(11, var_fun_declaration, is_first=True)
state_12 = State(12, var_fun_declaration)
state_13 = State(13, var_fun_declaration)
state_14 = State(14, var_fun_declaration)
state_15 = State(15, var_fun_declaration, is_end=True)
state_11.add_edge(Edge(state_11, state_15, var_declaration_1))
state_11.add_edge(Edge(state_11, state_12, t_open_parant))
state_12.add_edge(Edge(state_12, state_13, params))
state_13.add_edge(Edge(state_13, state_14, t_close_parant))
state_14.add_edge(Edge(state_14, state_15, compound_stmt))
var_fun_declaration.set_transition_diagram(Transition_diagram([state_11, state_12, state_13, state_14, state_15], state_11))

state_16 = State(16, var_declaration, is_first=True)
state_17 = State(17, var_declaration)
state_18 = State(18, var_declaration)
state_19 = State(19, var_declaration, is_end=True)
state_16.add_edge(Edge(state_16, state_17, type_specifier))
state_17.add_edge(Edge(state_17, state_18, t_id))
state_18.add_edge(Edge(state_18, state_19, var_declaration_1))
var_declaration.set_transition_diagram(Transition_diagram([state_16, state_17, state_18, state_19], state_16))

state_20 = State(20, var_declaration_1, is_first=True)
state_21 = State(21, var_declaration_1)
state_22 = State(22, var_declaration_1)
state_23 = State(23, var_declaration_1)
state_24 = State(24, var_declaration_1, is_end=True)
state_20.add_edge(Edge(state_20, state_24, t_semicolon, codegen_method=var_dec_finish))
state_20.add_edge(Edge(state_20, state_21, t_open_bracket))
state_21.add_edge(Edge(state_21, state_22, t_num, codegen_method=arr_len_dec))
state_22.add_edge(Edge(state_22, state_23, t_close_bracket))
state_23.add_edge(Edge(state_23, state_24, t_semicolon, codegen_method=arr_dec_finish))
var_declaration_1.set_transition_diagram(Transition_diagram([state_20, state_21, state_22, state_23, state_24], state_20))

state_25 = State(25, type_specifier, is_first=True)
state_26 = State(26, type_specifier, is_end=True)
state_25.add_edge(Edge(state_25, state_26, t_int, codegen_method=ptype_int_dec))
state_25.add_edge(Edge(state_25, state_26, t_void, codegen_method=ptype_int_dec))
type_specifier.set_transition_diagram(Transition_diagram([state_25, state_26], state_25))

state_27 = State(27, fun_declaration, is_first=True)
state_28 = State(28, fun_declaration)
state_29 = State(29, fun_declaration)
state_30 = State(30, fun_declaration)
state_31 = State(31, fun_declaration)
state_32 = State(32, fun_declaration)
state_33 = State(33, fun_declaration, is_end=True)
state_27.add_edge(Edge(state_27, state_28, type_specifier))
state_28.add_edge(Edge(state_28, state_29, t_id))
state_29.add_edge(Edge(state_29, state_30, t_open_parant))
state_30.add_edge(Edge(state_30, state_31, params))
state_31.add_edge(Edge(state_31, state_32, t_close_parant))
state_32.add_edge(Edge(state_32, state_33, compound_stmt))
fun_declaration.set_transition_diagram(Transition_diagram([state_27, state_28, state_29, state_30, state_31, state_32, state_33], state_33))

state_34 = State(34, params, is_first=True)
state_35 = State(35, params)
state_36 = State(36, params, is_end=True)
state_34.add_edge(Edge(state_34, state_35, t_void))
state_35.add_edge(Edge(state_35, state_36, params_1))
state_34.add_edge(Edge(state_34, state_36, params_2))
params.set_transition_diagram(Transition_diagram([state_34, state_35, state_36], state_34))

state_37 = State(37, params_1, is_first=True)
state_38 = State(38, params_1, is_end=True)
state_37.add_edge(Edge(state_37, state_38, param_list_void))
state_37.add_edge(Edge(state_37, state_38, t_epsilon))
params_1.set_transition_diagram(Transition_diagram([state_37, state_38], state_37))

state_39 = State(39, param_list_void, is_first=True)
state_40 = State(40, param_list_void)
state_41 = State(41, param_list_void, is_end=True)
state_39.add_edge(Edge(state_39, state_40, param_void))
state_40.add_edge(Edge(state_40, state_41, param_list_1))
param_list_void.set_transition_diagram(Transition_diagram([state_39, state_40, state_41], state_39))

state_42 = State(42, param_void, is_first=True)
state_43 = State(43, param_void)
state_44 = State(44, param_void, is_end=True)
state_42.add_edge(Edge(state_42, state_43, t_id))
state_43.add_edge(Edge(state_43, state_44, param_1))
param_void.set_transition_diagram(Transition_diagram([state_42, state_43, state_44], state_42))

state_45 = State(45, params_2, is_first=True)
state_46 = State(46, params_2)
state_47 = State(47, params_2, is_end=True)
state_45.add_edge(Edge(state_45, state_46, param_void_1))
state_46.add_edge(Edge(state_46, state_47, param_list_1))
params_2.set_transition_diagram(Transition_diagram([state_45, state_46, state_47], state_45))

state_48 = State(48, param_void_1, is_first=True)
state_49 = State(49, param_void_1)
state_50 = State(50, param_void_1)
state_51 = State(51, param_void_1, is_end=True)
state_48.add_edge(Edge(state_48, state_49, t_int))
state_49.add_edge(Edge(state_49, state_50, t_id))
state_50.add_edge(Edge(state_50, state_51, param_1))
param_void_1.set_transition_diagram(Transition_diagram([state_48, state_49, state_50, state_51], state_48))

state_52 = State(52, param_list, is_first=True)
state_53 = State(53, param_list)
state_54 = State(54, param_list, is_end=True)
state_52.add_edge(Edge(state_52, state_53, param))
state_53.add_edge(Edge(state_53, state_54, param_list_1))
param_list.set_transition_diagram(Transition_diagram([state_52, state_53, state_54], state_52))

state_55 = State(55, param_list_1, is_first=True)
state_56 = State(56, param_list_1)
state_57 = State(57, param_list_1, is_end=True)
state_55.add_edge(Edge(state_55, state_56, t_comma))
state_56.add_edge(Edge(state_56, state_57, param_list))
state_55.add_edge(Edge(state_55, state_57, t_epsilon))
param_list_1.set_transition_diagram(Transition_diagram([state_55, state_56, state_57], state_55))

state_58 = State(58, param, is_first=True)
state_59 = State(59, param)
state_60 = State(60, param)
state_61 = State(61, param, is_end=True)
state_58.add_edge(Edge(state_58, state_59, type_specifier))
state_59.add_edge(Edge(state_59, state_60, t_id))
state_60.add_edge(Edge(state_60, state_61, param_1))
param.set_transition_diagram(Transition_diagram([state_58, state_59, state_60, state_61], state_58))

state_62 = State(62, param_1, is_first=True)
state_63 = State(63, param_1)
state_64 = State(64, param_1, is_end=True)
state_62.add_edge(Edge(state_62, state_63, t_open_bracket))
state_63.add_edge(Edge(state_63, state_64, t_close_bracket))
state_62.add_edge(Edge(state_62, state_64, t_epsilon))
param_1.set_transition_diagram(Transition_diagram([state_62, state_63, state_64], state_62))

state_65 = State(65, compound_stmt, is_first=True)
state_66 = State(66, compound_stmt)
state_67 = State(67, compound_stmt)
state_68 = State(68, compound_stmt)
state_69 = State(69, compound_stmt, is_end=True, codegen_method=exit_scope)
state_65.add_edge(Edge(state_65, state_66, t_open_crosh))
state_66.add_edge(Edge(state_66, state_67, declaration_list, codegen_method=enter_scope))
state_67.add_edge(Edge(state_67, state_68, statement_list))
state_68.add_edge(Edge(state_68, state_69, t_close_crosh))
compound_stmt.set_transition_diagram(Transition_diagram([state_65, state_66, state_67, state_68, state_69], state_65))

state_70 = State(70, statement_list, is_first=True)
state_71 = State(71, statement_list)
state_72 = State(72, statement_list, is_end=True)
state_70.add_edge(Edge(state_70, state_71, statement))
state_71.add_edge(Edge(state_71, state_72, statement_list))
state_70.add_edge(Edge(state_70, state_72, t_epsilon))
statement_list.set_transition_diagram(Transition_diagram([state_70, state_71, state_72], state_70))

state_73 = State(73, statement, is_first=True)
state_74 = State(74, statement, is_end=True)
state_73.add_edge(Edge(state_73, state_74, expression_stmt))
state_73.add_edge(Edge(state_73, state_74, compound_stmt))
state_73.add_edge(Edge(state_73, state_74, selection_stmt))
state_73.add_edge(Edge(state_73, state_74, iteration_stmt))
state_73.add_edge(Edge(state_73, state_74, return_stmt))
state_73.add_edge(Edge(state_73, state_74, switch_stmt))
statement.set_transition_diagram(Transition_diagram([state_73, state_74], state_73))

state_75 = State(75, expression_stmt, is_first=True)
state_76 = State(76, expression_stmt)
state_77 = State(77, expression_stmt, is_end=True)
state_75.add_edge(Edge(state_75, state_76, expression))
state_76.add_edge(Edge(state_76, state_77, t_semicolon))
state_75.add_edge(Edge(state_75, state_76, t_continue))
state_76.add_edge(Edge(state_76, state_77, t_semicolon))
state_75.add_edge(Edge(state_75, state_76, t_break))
state_76.add_edge(Edge(state_76, state_77, t_semicolon))
state_75.add_edge(Edge(state_75, state_77, t_semicolon))
expression_stmt.set_transition_diagram(Transition_diagram([state_75, state_76, state_77], state_75))

state_78 = State(78, selection_stmt, is_first=True)
state_79 = State(79, selection_stmt)
state_80 = State(80, selection_stmt)
state_81 = State(81, selection_stmt)
state_82 = State(82, selection_stmt)
state_83 = State(83, selection_stmt)
state_84 = State(84, selection_stmt)
state_85 = State(85, selection_stmt, is_end=True)
state_78.add_edge(Edge(state_78, state_79, t_if))
state_79.add_edge(Edge(state_79, state_80, t_open_parant))
state_80.add_edge(Edge(state_80, state_81, expression))
state_81.add_edge(Edge(state_81, state_82, t_close_parant))
state_82.add_edge(Edge(state_82, state_83, statement, codegen_method=if_jmpc_else))
state_83.add_edge(Edge(state_83, state_84, t_else, codegen_method=[if_jmpu_end, if_label_else]))
state_84.add_edge(Edge(state_84, state_85, statement, codegen_method=if_label_end))
selection_stmt.set_transition_diagram(Transition_diagram([state_78, state_79, state_80, state_81, state_82, state_83, state_84, state_85], state_78))

state_86 = State(86, iteration_stmt, is_first=True)
state_87 = State(87, iteration_stmt)
state_88 = State(88, iteration_stmt)
state_89 = State(89, iteration_stmt)
state_90 = State(90, iteration_stmt)
state_91 = State(91, iteration_stmt, is_end=True, codegen_method=[while_jmpu_start, while_label_end])
state_86.add_edge(Edge(state_86, state_87, t_while))
state_87.add_edge(Edge(state_87, state_88, t_open_parant, codegen_method=while_label_start))
state_88.add_edge(Edge(state_88, state_89, expression))
state_89.add_edge(Edge(state_89, state_90, t_close_parant))
state_90.add_edge(Edge(state_90, state_91, statement))
iteration_stmt.set_transition_diagram(Transition_diagram([state_86, state_87, state_88, state_89, state_90, state_91], state_86))

state_92 = State(92, return_stmt, is_first=True)
state_93 = State(93, return_stmt)
state_94 = State(94, return_stmt, is_end=True)
state_92.add_edge(Edge(state_92, state_93, t_return))
state_93.add_edge(Edge(state_93, state_94, return_stmt_1))
return_stmt.set_transition_diagram(Transition_diagram([state_92, state_93, state_94], state_92))

state_95 = State(95, return_stmt_1, is_first=True)
state_96 = State(96, return_stmt_1)
state_97 = State(97, return_stmt_1, is_end=True)
state_95.add_edge(Edge(state_95, state_96, expression))
state_96.add_edge(Edge(state_96, state_97, t_semicolon))
state_95.add_edge(Edge(state_95, state_97, t_semicolon))
return_stmt_1.set_transition_diagram(Transition_diagram([state_95, state_96, state_97], state_95))

state_98 = State(98, switch_stmt, is_first=True)
state_99 = State(99, switch_stmt)
state_100 = State(100, switch_stmt)
state_101 = State(101, switch_stmt)
state_102 = State(102, switch_stmt)
state_103 = State(103, switch_stmt)
state_104 = State(104, switch_stmt)
state_105 = State(105, switch_stmt)
state_106 = State(106, switch_stmt, is_end=True, codegen_method=switch_label_end)
state_98.add_edge(Edge(state_98, state_99, t_switch, codegen_method=[switch_jmpu_ignore, switch_jmpu_end,
                                                                     switch_label_ignore]))
state_99.add_edge(Edge(state_99, state_100, t_open_parant))
state_100.add_edge(Edge(state_100, state_101, expression))
state_101.add_edge(Edge(state_101, state_102, t_close_parant))
state_102.add_edge(Edge(state_102, state_103, t_open_crosh))
state_103.add_edge(Edge(state_103, state_104, case_stmts))
state_104.add_edge(Edge(state_104, state_105, default_stmt))
state_105.add_edge(Edge(state_105, state_106, t_close_crosh))
switch_stmt.set_transition_diagram(Transition_diagram([state_98, state_99, state_100, state_101, state_102, state_103, state_104, state_105, state_106], state_98))

state_107 = State(107, case_stmts, is_first=True)
state_108 = State(108, case_stmts)
state_109 = State(109, case_stmts, is_end=True)
state_107.add_edge(Edge(state_107, state_108, case_stmt))
state_108.add_edge(Edge(state_108, state_109, case_stmts))
state_107.add_edge(Edge(state_107, state_109, t_epsilon))
case_stmts.set_transition_diagram(Transition_diagram([state_107, state_108, state_109], state_107))

state_110 = State(110, case_stmt, is_first=True)
state_111 = State(111, case_stmt)
state_112 = State(112, case_stmt)
state_113 = State(113, case_stmt)
state_114 = State(114, case_stmt, is_end=True, codegen_method=[switch_jmpu_start, switch_label_skip])
state_110.add_edge(Edge(state_110, state_111, t_case))
state_111.add_edge(Edge(state_111, state_112, t_num, codegen_method=push_ss))
state_112.add_edge(Edge(state_112, state_113, t_double_dot, codegen_method=switch_jmpc_skip))
state_113.add_edge(Edge(state_113, state_114, statement_list))
case_stmt.set_transition_diagram(Transition_diagram([state_110, state_111, state_112, state_113, state_114], state_110))

state_115 = State(115, default_stmt, is_first=True)
state_116 = State(116, default_stmt)
state_117 = State(117, default_stmt)
state_118 = State(118, default_stmt, is_end=True)
state_115.add_edge(Edge(state_115, state_116, t_default))
state_116.add_edge(Edge(state_116, state_117, t_double_dot))
state_117.add_edge(Edge(state_117, state_118, statement_list))
state_115.add_edge(Edge(state_115, state_118, t_epsilon))
default_stmt.set_transition_diagram(Transition_diagram([state_115, state_116, state_117, state_118], state_115))

state_119 = State(119, expression, is_first=True)
state_120 = State(120, expression)
state_121 = State(121, expression, is_end=True)
state_119.add_edge(Edge(state_119, state_120, t_id))
state_120.add_edge(Edge(state_120, state_121, expression_id_1))
state_119.add_edge(Edge(state_119, state_121, expression_id_2))
expression.set_transition_diagram(Transition_diagram([state_119, state_120, state_121], state_119))

state_122 = State(122, simple_expression_id_1, is_first=True)
state_123 = State(123, simple_expression_id_1)
state_124 = State(124, simple_expression_id_1, is_end=True)
state_122.add_edge(Edge(state_122, state_123, additive_expression_id_1))
state_123.add_edge(Edge(state_123, state_124, simple_expression_1))
simple_expression_id_1.set_transition_diagram(Transition_diagram([state_122, state_123, state_124], state_122))

state_125 = State(125, additive_expression_id_1, is_first=True)
state_126 = State(126, additive_expression_id_1)
state_127 = State(127, additive_expression_id_1, is_end=True)
state_125.add_edge(Edge(state_125, state_126, term_id_1))
state_126.add_edge(Edge(state_126, state_127, additive_expression_1))
additive_expression_id_1.set_transition_diagram(Transition_diagram([state_125, state_126, state_127], state_125))

state_128 = State(128, term_id_1, is_first=True)
state_129 = State(129, term_id_1)
state_130 = State(130, term_id_1, is_end=True)
state_128.add_edge(Edge(state_128, state_129, signed_factor_id))
state_129.add_edge(Edge(state_129, state_130, term_1))
term_id_1.set_transition_diagram(Transition_diagram([state_128, state_129, state_130], state_128))

state_131 = State(131, signed_factor_id, is_first=True)
state_132 = State(132, signed_factor_id, is_end=True)
state_131.add_edge(Edge(state_131, state_132, var_call))
signed_factor_id.set_transition_diagram(Transition_diagram([state_131, state_132], state_131))

state_133 = State(133, expression_id_1, is_first=True)
state_134 = State(134, expression_id_1)
state_135 = State(135, expression_id_1, is_end=True)
state_133.add_edge(Edge(state_133, state_134, var_1))
state_134.add_edge(Edge(state_134, state_135, expression_ob_1))
state_133.add_edge(Edge(state_133, state_135, simple_expression_id_ob_2))
expression_id_1.set_transition_diagram(Transition_diagram([state_133, state_134, state_135], state_133))

state_136 = State(136, expression_ob_1, is_first=True)
state_137 = State(137, expression_ob_1)
state_138 = State(138, expression_ob_1, is_end=True)
state_136.add_edge(Edge(state_136, state_137, t_equal))
state_137.add_edge(Edge(state_137, state_138, expression))
state_136.add_edge(Edge(state_136, state_138, simple_expression_id_ob_1))
expression_ob_1.set_transition_diagram(Transition_diagram([state_136, state_137, state_138], state_136))

state_139 = State(139, simple_expression_id_ob_1, is_first=True)
state_140 = State(140, simple_expression_id_ob_1)
state_141 = State(141, simple_expression_id_ob_1, is_end=True)
state_139.add_edge(Edge(state_139, state_140, additive_expression_id_ob_1))
state_140.add_edge(Edge(state_140, state_141, simple_expression_1))
simple_expression_id_ob_1.set_transition_diagram(Transition_diagram([state_139, state_140, state_141], state_139))

state_142 = State(142, additive_expression_id_ob_1, is_first=True)
state_143 = State(143, additive_expression_id_ob_1)
state_144 = State(144, additive_expression_id_ob_1, is_end=True)
state_142.add_edge(Edge(state_142, state_143, term_1))
state_143.add_edge(Edge(state_143, state_144, additive_expression_1))
additive_expression_id_ob_1.set_transition_diagram(Transition_diagram([state_142, state_143, state_144], state_142))

state_145 = State(145, simple_expression_id_ob_2, is_first=True)
state_146 = State(146, simple_expression_id_ob_2)
state_147 = State(147, simple_expression_id_ob_2, is_end=True)
state_145.add_edge(Edge(state_145, state_146, additive_expression_id_ob_2))
state_146.add_edge(Edge(state_146, state_147, simple_expression_1))
simple_expression_id_ob_2.set_transition_diagram(Transition_diagram([state_145, state_146, state_147], state_145))

state_148 = State(148, additive_expression_id_ob_2, is_first=True)
state_149 = State(149, additive_expression_id_ob_2)
state_150 = State(150, additive_expression_id_ob_2, is_end=True)
state_148.add_edge(Edge(state_148, state_149, term_id_ob_2))
state_149.add_edge(Edge(state_149, state_150, additive_expression_1))
additive_expression_id_ob_2.set_transition_diagram(Transition_diagram([state_148, state_149, state_150], state_148))

state_151 = State(151, term_id_ob_2, is_first=True)
state_152 = State(152, term_id_ob_2)
state_153 = State(153, term_id_ob_2)
state_154 = State(154, term_id_ob_2)
state_155 = State(155, term_id_ob_2, is_end=True)
state_151.add_edge(Edge(state_151, state_152, t_open_parant))
state_152.add_edge(Edge(state_152, state_153, args))
state_153.add_edge(Edge(state_153, state_154, t_close_parant))
state_154.add_edge(Edge(state_154, state_155, term_1))
term_id_ob_2.set_transition_diagram(Transition_diagram([state_151, state_152, state_153, state_154, state_155], state_151))

state_156 = State(156, var_1, is_first=True)
state_157 = State(157, var_1)
state_158 = State(158, var_1)
state_159 = State(159, var_1, is_end=True)
state_156.add_edge(Edge(state_156, state_157, t_open_bracket))
state_157.add_edge(Edge(state_157, state_158, expression))
state_158.add_edge(Edge(state_158, state_159, t_close_bracket))
state_156.add_edge(Edge(state_156, state_159, t_epsilon))
var_1.set_transition_diagram(Transition_diagram([state_156, state_157, state_158, state_159], state_156))

state_160 = State(160, simple_expression, is_first=True)
state_161 = State(161, simple_expression)
state_162 = State(162, simple_expression, is_end=True)
state_160.add_edge(Edge(state_160, state_161, additive_expression))
state_161.add_edge(Edge(state_161, state_162, simple_expression_1))
simple_expression.set_transition_diagram(Transition_diagram([state_160, state_161, state_162], state_160))

state_163 = State(163, simple_expression_1, is_first=True)
state_164 = State(164, simple_expression_1)
state_165 = State(165, simple_expression_1, is_end=True)
state_163.add_edge(Edge(state_163, state_164, relop))
state_164.add_edge(Edge(state_164, state_165, additive_expression))
state_163.add_edge(Edge(state_163, state_165, t_epsilon))
simple_expression_1.set_transition_diagram(Transition_diagram([state_163, state_164, state_165], state_163))

state_166 = State(166, relop, is_first=True)
state_167 = State(167, relop)
state_168 = State(168, relop, is_end=True)
state_166.add_edge(Edge(state_166, state_168, t_double_equal))
state_166.add_edge(Edge(state_166, state_168, t_lower))
relop.set_transition_diagram(Transition_diagram([state_166, state_167, state_168], state_166))

state_169 = State(169, additive_expression, is_first=True)
state_170 = State(170, additive_expression)
state_171 = State(171, additive_expression, is_end=True)
state_169.add_edge(Edge(state_169, state_170, term))
state_170.add_edge(Edge(state_170, state_171, additive_expression_1))
additive_expression.set_transition_diagram(Transition_diagram([state_169, state_170, state_171], state_169))

state_172 = State(172, additive_expression_1, is_first=True)
state_173 = State(173, additive_expression_1)
state_174 = State(174, additive_expression_1, is_end=True)
state_172.add_edge(Edge(state_172, state_173, addop))
state_173.add_edge(Edge(state_173, state_174, additive_expression))
state_172.add_edge(Edge(state_172, state_174, t_epsilon))
additive_expression_1.set_transition_diagram(Transition_diagram([state_172, state_173, state_174], state_172))

state_175 = State(175, addop, is_first=True)
state_176 = State(176, addop, is_end=True)
state_175.add_edge(Edge(state_175, state_176, t_plus))
state_175.add_edge(Edge(state_175, state_176, t_minus))
addop.set_transition_diagram(Transition_diagram([state_175, state_176], state_175))

state_177 = State(177, term, is_first=True)
state_178 = State(178, term)
state_179 = State(179, term, is_end=True)
state_177.add_edge(Edge(state_177, state_178, signed_factor))
state_178.add_edge(Edge(state_178, state_179, term_1))
term.set_transition_diagram(Transition_diagram([state_177, state_178, state_179], state_177))

state_180 = State(180, term_1, is_first=True)
state_181 = State(181, term_1)
state_182 = State(182, term_1, is_end=True)
state_180.add_edge(Edge(state_180, state_181, t_star))
state_181.add_edge(Edge(state_181, state_182, term))
state_180.add_edge(Edge(state_180, state_182, t_epsilon))
term_1.set_transition_diagram(Transition_diagram([state_180, state_181, state_182], state_180))

state_183 = State(183, signed_factor, is_first=True)
state_184 = State(184, signed_factor)
state_185 = State(185, signed_factor, is_end=True)
state_183.add_edge(Edge(state_183, state_185, factor))
state_183.add_edge(Edge(state_183, state_184, t_plus))
state_184.add_edge(Edge(state_184, state_185, factor))
state_183.add_edge(Edge(state_183, state_184, t_minus))
state_184.add_edge(Edge(state_184, state_185, factor))
signed_factor.set_transition_diagram(Transition_diagram([state_183, state_184, state_185], state_183))

state_186 = State(186, factor, is_first=True)
state_187 = State(187, factor)
state_188 = State(188, factor)
state_189 = State(189, factor)
state_190 = State(190, factor, is_end=True)
state_186.add_edge(Edge(state_186, state_187, t_open_parant))
state_187.add_edge(Edge(state_187, state_188, expression))
state_188.add_edge(Edge(state_188, state_190, t_close_parant))
state_186.add_edge(Edge(state_186, state_189, t_id))
state_189.add_edge(Edge(state_189, state_190, var_call))
state_186.add_edge(Edge(state_186, state_190, t_num))
factor.set_transition_diagram(Transition_diagram([state_186, state_187, state_188, state_189, state_190], state_186))

state_191 = State(191, var_call, is_first=True)
state_192 = State(192, var_call)
state_193 = State(193, var_call)
state_194 = State(194, var_call, is_end=True)
state_191.add_edge(Edge(state_191, state_192, t_open_parant))
state_192.add_edge(Edge(state_192, state_193, args))
state_193.add_edge(Edge(state_193, state_194, t_close_parant))
state_191.add_edge(Edge(state_191, state_194, var_1))
var_call.set_transition_diagram(Transition_diagram([state_191, state_192, state_193, state_194], state_191))

state_195 = State(195, call, is_first=True)
state_196 = State(196, call)
state_197 = State(197, call)
state_198 = State(198, call)
state_199 = State(199, call, is_end=True)
state_195.add_edge(Edge(state_195, state_196, t_id))
state_196.add_edge(Edge(state_196, state_197, t_open_parant))
state_197.add_edge(Edge(state_197, state_198, args))
state_198.add_edge(Edge(state_198, state_199, t_close_parant))
call.set_transition_diagram(Transition_diagram([state_195, state_196, state_197, state_198, state_199], state_195))

state_200 = State(200, args, is_first=True)
state_201 = State(201, args, is_end=True)
state_200.add_edge(Edge(state_200, state_201, arg_list))
state_200.add_edge(Edge(state_200, state_201, t_epsilon))
args.set_transition_diagram(Transition_diagram([state_200, state_201], state_200))

state_202 = State(202, arg_list, is_first=True)
state_203 = State(203, arg_list)
state_204 = State(204, arg_list, is_end=True)
state_202.add_edge(Edge(state_202, state_203, expression))
state_203.add_edge(Edge(state_203, state_204, arg_list_1))
arg_list.set_transition_diagram(Transition_diagram([state_202, state_203, state_204], state_202))

state_205 = State(205, arg_list_1, is_first=True)
state_206 = State(206, arg_list_1)
state_207 = State(207, arg_list_1, is_end=True)
state_205.add_edge(Edge(state_205, state_206, t_comma))
state_206.add_edge(Edge(state_206, state_207, arg_list))
state_205.add_edge(Edge(state_205, state_207, t_epsilon))
arg_list_1.set_transition_diagram(Transition_diagram([state_205, state_206, state_207], state_205))

state_208 = State(208, expression_id_2, is_first=True)
state_209 = State(209, expression_id_2)
state_210 = State(210, expression_id_2, is_end=True)
state_208.add_edge(Edge(state_208, state_209, additive_expression_id_2))
state_209.add_edge(Edge(state_209, state_210, simple_expression_1))
expression_id_2.set_transition_diagram(Transition_diagram([state_208, state_209, state_210, ], state_208))

state_211 = State(211, additive_expression_id_2, is_first=True)
state_212 = State(212, additive_expression_id_2)
state_213 = State(213, additive_expression_id_2, is_end=True)
state_211.add_edge(Edge(state_211, state_212, term_id_2))
state_212.add_edge(Edge(state_212, state_213, additive_expression_1))
additive_expression_id_2.set_transition_diagram(Transition_diagram([state_211, state_212, state_213, ], state_211))

state_214 = State(214, term_id_2, is_first=True)
state_215 = State(215, term_id_2)
state_216 = State(216, term_id_2, is_end=True)
state_214.add_edge(Edge(state_214, state_215, signed_factor_id_2))
state_215.add_edge(Edge(state_215, state_216, term_1))
term_id_2.set_transition_diagram(Transition_diagram([state_214, state_215, state_216, ], state_214))

state_217 = State(217, signed_factor_id_2, is_first=True)
state_218 = State(218, signed_factor_id_2)
state_219 = State(219, signed_factor_id_2, is_end=True)
state_217.add_edge(Edge(state_217, state_219, factor_id_1))
state_217.add_edge(Edge(state_217, state_218, t_plus))
state_218.add_edge(Edge(state_218, state_219, factor))
state_217.add_edge(Edge(state_217, state_218, t_minus))
state_218.add_edge(Edge(state_218, state_219, factor))
signed_factor_id_2.set_transition_diagram(Transition_diagram([state_217, state_218, state_219, ], state_217))

state_220 = State(220, factor_id_1, is_first=True)
state_221 = State(221, factor_id_1)
state_222 = State(222, factor_id_1)
state_223 = State(223, factor_id_1, is_end=True)
state_220.add_edge(Edge(state_220, state_221, t_open_parant))
state_221.add_edge(Edge(state_221, state_222, expression))
state_222.add_edge(Edge(state_222, state_223, t_close_parant))
state_220.add_edge(Edge(state_220, state_223, t_num))
factor_id_1.set_transition_diagram(Transition_diagram([state_220, state_221, state_222, state_223, ], state_220))

# E = Non_Terminal("E")
# T = Non_Terminal("T")
# E_prime = Non_Terminal("E\'")
# F = Non_Terminal("F")
# T_prime = Non_Terminal("T\'")
#
# E_prime.set_first([t_plus, t_epsilon])
# T_prime.set_first([t_star, t_epsilon])
# F.set_first([t_open_parant, t_id])
# T.set_first([t_open_parant, t_id])
# E.set_first([t_open_parant, t_id])
#
# E.set_follow([t_close_parant])
# E_prime.set_follow([t_close_parant])
# T.set_follow([t_plus, t_close_parant])
# T_prime.set_follow([t_plus, t_close_parant])
# F.set_follow([t_star, t_plus, t_close_parant])
#
#
# state_0 = State(0, E, is_first=True)
# state_1 = State(1, E)
# state_2 = State(2, E, is_end=True)
# state_0.add_edge(Edge(state_0, state_1, T))
# state_1.add_edge(Edge(state_1, state_2, E_prime))
# E.set_transition_diagram(Transition_diagram([state_0, state_1, state_2], state_0))
#
# state_3 = State(3, E_prime, is_first=True)
# state_4 = State(4, E_prime)
# state_5 = State(5, E_prime)
# state_6 = State(6, E_prime, is_end=True)
# state_3.add_edge(Edge(state_3, state_4, t_plus))
# state_3.add_edge(Edge(state_3, state_6, t_epsilon))
# state_4.add_edge(Edge(state_4, state_5, T))
# state_5.add_edge(Edge(state_5, state_6, E_prime))
# E_prime.set_transition_diagram(Transition_diagram([state_3, state_4, state_5, state_6], state_3))
#
# state_7 = State(7, T, is_first=True)
# state_8 = State(8, T)
# state_9 = State(9, T, is_end=True)
# state_7.add_edge(Edge(state_7, state_8, F))
# state_8.add_edge(Edge(state_8, state_9, T_prime))
# T.set_transition_diagram(Transition_diagram([state_7, state_8, state_9], state_7))
#
# state_10 = State(10, T_prime, is_first=True)
# state_11 = State(11, T_prime)
# state_12 = State(12, T_prime)
# state_13 = State(13, T_prime, is_end=True)
# state_10.add_edge(Edge(state_10, state_11, t_star))
# state_10.add_edge(Edge(state_10, state_13, t_epsilon))
# state_11.add_edge(Edge(state_11, state_12, F))
# state_12.add_edge(Edge(state_12, state_13, T_prime))
# T_prime.set_transition_diagram(Transition_diagram([state_10, state_11, state_12, state_13], state_10))
#
# state_14 = State(14, F, is_first=True)
# state_15 = State(15, F)
# state_16 = State(16, F)
# state_17 = State(17, F, is_end=True)
# state_14.add_edge(Edge(state_14, state_15, t_open_parant))
# state_14.add_edge(Edge(state_14, state_17, t_id))
# state_15.add_edge(Edge(state_15, state_16, E))
# state_16.add_edge(Edge(state_16, state_17, t_close_parant))
# F.set_transition_diagram(Transition_diagram([state_14, state_15, state_16, state_17], state_14))


