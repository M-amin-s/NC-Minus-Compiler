from Compiler.parser_classes import *
from Compiler.scanner import TokenType

t_eof = Terminal(TokenType.EOF, '')
t_epsilon = Terminal(TokenType.NOT_A_TYPE, None, True)
t_id = Terminal(TokenType.ID, None)
t_semicolon = Terminal(TokenType.SYMBOL, ';')
t_open_bracket = Terminal(TokenType.SYMBOL, '[')
t_close_bracket = Terminal(TokenType.SYMBOL, ']')
t_num = Terminal(TokenType.NUM, None)
t_int = Terminal(TokenType.KEYWORD, 'int')
t_void = Terminal(TokenType.KEYWORD, 'void')
t_open_parant = Terminal(TokenType.SYMBOL, '(')
t_close_parant = Terminal(TokenType.SYMBOL, ')')
t_open_crosh = Terminal(TokenType.SYMBOL, '{')
t_close_crosh = Terminal(TokenType.SYMBOL, '}')
t_continue = Terminal(TokenType.KEYWORD, 'continue')
t_break = Terminal(TokenType.KEYWORD, 'break')
t_if = Terminal(TokenType.KEYWORD, 'if')
t_else = Terminal(TokenType.KEYWORD, 'else')
t_while = Terminal(TokenType.KEYWORD, 'while')
t_return = Terminal(TokenType.KEYWORD, 'return')
t_switch = Terminal(TokenType.KEYWORD, 'switch')
t_case = Terminal(TokenType.KEYWORD, 'case')
t_default = Terminal(TokenType.KEYWORD, 'default')
t_double_dot = Terminal(TokenType.SYMBOL, ':')
t_equal = Terminal(TokenType.SYMBOL, '=')
t_comma = Terminal(TokenType.SYMBOL, ',')
t_plus = Terminal(TokenType.SYMBOL, '+')
t_minus = Terminal(TokenType.SYMBOL, '-')
t_star = Terminal(TokenType.SYMBOL, '*')
t_double_equal = Terminal(TokenType.SYMBOL, '==')
t_lower = Terminal(TokenType.SYMBOL, '<')
t_greater = Terminal(TokenType.SYMBOL, '>')

# program = Non_Terminal("program")
# declaration_list = Non_Terminal("declaration_list")
# declaration = Non_Terminal("declaration")
# var_declaration = Non_Terminal("var_declaration")
# fun_declaration = Non_Terminal("fun_declaration")
# type_specifier = Non_Terminal("type_specifier")
# var_declaration_1 = Non_Terminal("var_declaration_1")
# params = Non_Terminal("params")
# param_list = Non_Terminal("param_list")
# param_list_1 = Non_Terminal("param_list_1")
# param = Non_Terminal("param")
# param_1 = Non_Terminal("param_1")
# compound_stmt = Non_Terminal("compound_stmt")
# statement_list = Non_Terminal("statement_list")
# statement = Non_Terminal("statement")
# expression_stmt = Non_Terminal("expression_stmt")
# selection_stmt = Non_Terminal("selection_stmt")
# iteration_stmt = Non_Terminal("iteration_stmt")
# return_stmt = Non_Terminal("return_stmt")
# return_stmt_1 = Non_Terminal("return_stmt_1")
# switch_stmt = Non_Terminal("switch_stmt")
# case_stmts = Non_Terminal("case_stmts")
# case_stmt = Non_Terminal("case_stmt")
# default_stmt = Non_Terminal("default_stmt")
# expression = Non_Terminal("expression")
# var = Non_Terminal("var")
# var_1 = Non_Terminal("var_1")
# simple_expression = Non_Terminal("simple_expression")
# simple_expression_1 = Non_Terminal("simple_expression_1")
# relop = Non_Terminal("relop")
# additive_expression = Non_Terminal("additive_expression")
# additive_expression_1 = Non_Terminal("additive_expression_1")
# addop = Non_Terminal("addop")
# term = Non_Terminal("term")
# term_1 = Non_Terminal("term_1")
# signed_factor = Non_Terminal("signed_factor")
# factor = Non_Terminal("factor")
# call = Non_Terminal("call")
# args = Non_Terminal("args")
# arg_list = Non_Terminal("arg_list")
# arg_list_1 = Non_Terminal("arg_list_1")

# state_1 = State(1, False, True)
# state_2 = State(2, False, False)
# state_3 = State(3, True, False)
# state_1.add_edge(Edge(state_1, state_2, declaration_list))
# state_2.add_edge(Edge(state_2, state_3, t_eof))
# program.set_transition_diagram(Transition_diagram([state_1, state_2, state_3]))
# state_4 = State(4, False, True)
# state_5 = State(5, False, False)
# state_6 = State(6, True, False)
# state_4.add_edge(Edge(state_4, state_5, declaration))
# state_5.add_edge(Edge(state_5, state_6, declaration_list))
# declaration_list.set_transition_diagram(Transition_diagram([state_4, state_5, state_6]))
# state_7 = State(7, False, True)
# state_8 = State(8, True, False)
# state_7.add_edge(Edge(state_7, state_8, var_declaration))
# state_7.add_edge(Edge(state_7, state_8, fun_declaration))
# declaration.set_transition_diagram(Transition_diagram([state_7, state_8]))
# state_9 = State(9, False, True)
# state_10 = State(10, False, False)
# state_11 = State(11, False, False)
# state_12 = State(12, True, False)
# state_9.add_edge(Edge(state_9, state_10, type_specifier))
# state_10.add_edge(Edge(state_10, state_11, t_id))
# state_11.add_edge(Edge(state_11, state_12, var_declaration_1))
# var_declaration_1.set_transition_diagram(Transition_diagram([state_9, state_10, state_11, state_12]))

E = Non_Terminal("E")
T = Non_Terminal("T")
E_prime = Non_Terminal("E\'")
F = Non_Terminal("F")
T_prime = Non_Terminal("T\'")

E_prime.set_first([t_plus, t_epsilon])
T_prime.set_first([t_star, t_epsilon])
F.set_first([t_open_parant, t_id])
T.set_first([t_open_parant, t_id])
E.set_first([t_open_parant, t_id])

E.set_follow([t_close_parant])
E_prime.set_follow([t_close_parant])
T.set_follow([t_plus, t_close_parant])
T_prime.set_follow([t_plus, t_close_parant])
F.set_follow([t_star, t_plus, t_close_parant])


state_0 = State(0, E, is_first=True)
state_1 = State(1, E)
state_2 = State(2, E, is_end=True)
state_0.add_edge(Edge(state_0, state_1, T))
state_1.add_edge(Edge(state_1, state_2, E_prime))
E.set_transition_diagram(Transition_diagram([state_0, state_1, state_2], state_0))

state_3 = State(3, E_prime, is_first=True)
state_4 = State(4, E_prime)
state_5 = State(5, E_prime)
state_6 = State(6, E_prime, is_end=True)
state_3.add_edge(Edge(state_3, state_4, t_plus))
state_3.add_edge(Edge(state_3, state_6, t_epsilon))
state_4.add_edge(Edge(state_4, state_5, T))
state_5.add_edge(Edge(state_5, state_6, E_prime))
E_prime.set_transition_diagram(Transition_diagram([state_3, state_4, state_5, state_6], state_3))

state_7 = State(7, T, is_first=True)
state_8 = State(8, T)
state_9 = State(9, T, is_end=True)
state_7.add_edge(Edge(state_7, state_8, F))
state_8.add_edge(Edge(state_8, state_9, T_prime))
T.set_transition_diagram(Transition_diagram([state_7, state_8, state_9], state_7))

state_10 = State(10, T_prime, is_first=True)
state_11 = State(11, T_prime)
state_12 = State(12, T_prime)
state_13 = State(13, T_prime, is_end=True)
state_10.add_edge(Edge(state_10, state_11, t_star))
state_10.add_edge(Edge(state_10, state_13, t_epsilon))
state_11.add_edge(Edge(state_11, state_12, F))
state_12.add_edge(Edge(state_12, state_13, T_prime))
T_prime.set_transition_diagram(Transition_diagram([state_10, state_11, state_12, state_13], state_10))

state_14 = State(14, F, is_first=True)
state_15 = State(15, F)
state_16 = State(16, F)
state_17 = State(17, F, is_end=True)
state_14.add_edge(Edge(state_14, state_15, t_open_parant))
state_14.add_edge(Edge(state_14, state_17, t_id))
state_15.add_edge(Edge(state_15, state_16, E))
state_16.add_edge(Edge(state_16, state_17, t_close_parant))
F.set_transition_diagram(Transition_diagram([state_14, state_15, state_16, state_17], state_14))


